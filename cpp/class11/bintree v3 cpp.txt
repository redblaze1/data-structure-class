#include <iostream>
#include <ctime>
#include <cstdlib>
#include <stdio.h>
#include <math.h>

using namespace std;


// ......queue 			
template <class T>
class Queue {
public:
	Queue(int cap);
	void Add(T);
	T Del();
	bool isEmpty();
private:
	int front, rear;
	T *array;
	int capacity;
};

template <class T>
Queue<T>::Queue(int cap) {
	//Bag<T>();		
	array = new T[cap];
	capacity = cap;
	front = rear = 0;
}

template <class T>
void Queue<T>::Add(T x) {
	int tmp = rear + 1;
	tmp %= capacity;
	if (tmp == front) cout << "Queue is full";
	else array[rear = tmp] = x;
}

template <class T>
T Queue<T>::Del() {
	if (front == rear) {
		cout << "Queue is empty.";
	}
	else {
		front = (front + 1) % capacity;
		return(array[front]);
	}
}

template <class T>
bool Queue<T>::isEmpty() {
	if (rear == front) return(1);
	else return(0);
}




template <class T> class Tree; //前向宣告			

template <class T>
class TreeNode {
	friend class Tree <T>;
	TreeNode(T e);
private:
	T data;
	TreeNode <T> *leftChild;
	TreeNode <T> *rightChild;
};

template <class T>
TreeNode<T>::TreeNode(T e) {
		data = e;
		leftChild = rightChild = 0;
}

template <class T>
class Tree{
public:
	Tree() { root = 0; }
	void buildTree1();
	void Inorder(TreeNode<T> *p);
	void Insert(T e);   // binary search tree insert

	void Levelorder(TreeNode<T> *p);
	void Plot();
	TreeNode<T> *returnRoot() {	return root;};
private:
	TreeNode <T> *root;
};


template <class T>
void Tree <T>::Levelorder(TreeNode<T> *currentNode)
{// 以階序方式走訪二元樹			
	Queue < TreeNode <T>*> q(200);
	while (currentNode) {
		cout << currentNode->data << "\t";
		if (currentNode->leftChild) q.Add(currentNode->leftChild);
		if (currentNode->rightChild) q.Add(currentNode->rightChild);
		if (q.isEmpty()) return;
		currentNode = q.Del();
	}
}


template <class T>
void Tree <T>::Inorder(TreeNode <T> *currentNode)
{ // 主程式走訪樹根為currentNode的子樹			
	if (currentNode != NULL) {
		Inorder(currentNode->leftChild);
		cout << currentNode->data << "\t";
		Inorder(currentNode->rightChild);
	}
}

template <class T>
void Tree<T>::Insert(T e) {
	TreeNode<T> *tmp = new TreeNode<T>(e), *pt;
	if (!root) root = tmp;
	else {
		pt = root;
		do {
			if (tmp->data <= pt->data) {
				if (!pt->leftChild) {
					pt->leftChild = tmp;
					break;
				}
				pt = pt->leftChild;
			}
			else {
				if (!pt->rightChild) {
					pt->rightChild = tmp;
					break;
				}
				pt = pt->rightChild;
			}
		} while (1);

	}
}

struct tmpT {
	TreeNode<char> *nd;
	int v1, v2;
};


#define MAX_LEVEL 6
#define RESOLUTION 2
#define LEFT_MARGINE 1
template <class T>
void Tree<T>::Plot() {
	TreeNode<T> *pt;
	Queue<tmpT> q(100);
	int ord, lev, now_pos, sps, now_lev;
	int idx;
	tmpT ele;
	double s, b;
	
	ele.nd = root;
	ele.v1 = 1;
	ele.v2 = 1;
	q.Add(ele);
	cout << endl;
	now_lev = 1; now_pos = 0;
	while(! q.isEmpty()) {
		ele = q.Del();
		pt = ele.nd; ord = ele.v1; lev = ele.v2;
		if(pt->leftChild) {
			ele.nd = pt->leftChild; ele.v1 = ord*2-1; ele.v2 = lev+1;
			q.Add(ele);
		}
		if(pt->rightChild) {
			ele.nd = pt->rightChild; ele.v1 = ord*2; ele.v2 = lev+1;
			q.Add(ele);
		}
		// * get idx, which counts from MAX_LEVEL (=1)
		idx = MAX_LEVEL - lev + 1;
		// * adjust position (now_pos)
		if(lev > now_lev) {
			cout << endl << endl;
			now_pos = 0;
			now_lev = lev;
		}
		// * calculate spaces (sps)
		s = pow(2.0, (double)(idx-1));
		b = s / 2 - 0.5;
		sps = b + s * (ord-1);
		sps *= RESOLUTION;
		sps += LEFT_MARGINE;
		// * print out sps
		while(now_pos < sps) {
			cout << " "; now_pos ++;
		}
		// * print the data
		cout << pt->data; now_pos ++;
	}
}

template <class T>
void Tree<T>::buildTree1() {
	root = new TreeNode<T>('x');
	root->leftChild = new TreeNode<T>('w');
	root->rightChild = new TreeNode<T>('y');
	root->rightChild->leftChild = new TreeNode<T>('z');
}

int main() {
	Tree<char> tree1;
	tree1.buildTree1();
	tree1.Insert('a');
	tree1.Insert('b');
	tree1.Inorder(tree1.returnRoot());
	cout << endl << "Level order " << endl;
	tree1.Levelorder(tree1.returnRoot());
	cout << " plot the tree" << endl;
	tree1.Plot();
	getchar();

}
